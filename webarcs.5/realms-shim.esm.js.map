{"version":3,"file":"realms-shim.esm.js","sources":["../src/utilities.js","../src/childRealm.js","../src/callAndWrapError.js","../src/commons.js","../src/stdlib.js","../src/repair/accessors.js","../src/repair/functions.js","../src/unsafeRec.js","../src/optimizer.js","../src/scopeHandler.js","../src/safeEval.js","../src/safeFunction.js","../src/transforms.js","../src/sourceParser.js","../src/evaluators.js","../src/realm.js"],"sourcesContent":["// we'd like to abandon, but we can't, so just scream and break a lot of\n// stuff. However, since we aren't really aborting the process, be careful to\n// not throw an Error object which could be captured by child-Realm code and\n// used to access the (too-powerful) primal-realm Error object.\n\nexport function throwTantrum(s, err = undefined) {\n  const msg = `please report internal shim error: ${s}`;\n\n  // we want to log these 'should never happen' things.\n  // eslint-disable-next-line no-console\n  console.error(msg);\n  if (err) {\n    // eslint-disable-next-line no-console\n    console.error(`${err}`);\n    // eslint-disable-next-line no-console\n    console.error(`${err.stack}`);\n  }\n\n  // eslint-disable-next-line no-debugger\n  debugger;\n  throw msg;\n}\n\nexport function assert(condition, message) {\n  if (!condition) {\n    throwTantrum(message);\n  }\n}\n\n/**\n * safeStringifyFunction()\n * Remove code modifications introduced by ems and nyx in\n * test mode which intefere with Function.toString().\n */\nexport function safeStringifyFunction(fn) {\n  let src = `'use strict'; (${fn})`;\n\n  // esm module creates \"runtime\" as \"_\" + hex(3) + \"\\u200D\"\n\n  // Restore eval which is modified by esm module.\n  // (0, eval) => (0, <runtime>.e)\n  src = src.replace(/\\(0,\\s*_[0-9a-fA-F]{3}\\u200D\\.e\\)/g, '(0, eval)');\n\n  // Restore globals such as Reflect which are modified by esm module.\n  // Reflect => <runtime>.e.Reflect\n  src = src.replace(/_[0-9a-fA-F]{3}\\u200D\\.g\\./g, '');\n\n  // Remove code coverage which is injected by nyc module.\n  src = src.replace(/cov_[^+]+\\+\\+[;,]/g, '');\n\n  return src;\n}\n","import { safeStringifyFunction } from './utilities';\n\n// buildChildRealm is immediately turned into a string, and this function is\n// never referenced again, because it closes over the wrong intrinsics\n\nexport function buildChildRealm(unsafeRec, BaseRealm) {\n  const { callAndWrapError } = unsafeRec;\n  const {\n    initRootRealm,\n    initCompartment,\n    getRealmGlobal,\n    realmEvaluate\n  } = BaseRealm;\n\n  const { create, defineProperties } = Object;\n\n  class Realm {\n    constructor() {\n      // The Realm constructor is not intended to be used with the new operator\n      // or to be subclassed. It may be used as the value of an extends clause\n      // of a class definition but a super call to the Realm constructor will\n      // cause an exception.\n\n      // When Realm is called as a function, an exception is also raised because\n      // a class constructor cannot be invoked without 'new'.\n      throw new TypeError('Realm is not a constructor');\n    }\n\n    static makeRootRealm(options = {}) {\n      // This is the exposed interface.\n\n      // Bypass the constructor.\n      const r = create(Realm.prototype);\n      callAndWrapError(initRootRealm, [unsafeRec, r, options]);\n      return r;\n    }\n\n    static makeCompartment(options = {}) {\n      // Bypass the constructor.\n      const r = create(Realm.prototype);\n      callAndWrapError(initCompartment, [unsafeRec, r, options]);\n      return r;\n    }\n\n    // we omit the constructor because it is empty. All the personalization\n    // takes place in one of the two static methods,\n    // makeRootRealm/makeCompartment\n\n    get global() {\n      // this is safe against being called with strange 'this' because\n      // baseGetGlobal immediately does a trademark check (it fails unless\n      // this 'this' is present in a weakmap that is only populated with\n      // legitimate Realm instances)\n      return callAndWrapError(getRealmGlobal, [this]);\n    }\n\n    evaluate(x, endowments, options = {}) {\n      // safe against strange 'this', as above\n      return callAndWrapError(realmEvaluate, [this, x, endowments, options]);\n    }\n  }\n\n  defineProperties(Realm, {\n    toString: {\n      value: () => 'function Realm() { [shim code] }',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    }\n  });\n\n  defineProperties(Realm.prototype, {\n    toString: {\n      value: () => '[object Realm]',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    }\n  });\n\n  return Realm;\n}\n\n// The parentheses means we don't bind the 'buildChildRealm' name inside the\n// child's namespace. this would accept an anonymous function declaration.\n// function expression (not a declaration) so it has a completion value.\nexport const buildChildRealmString = safeStringifyFunction(buildChildRealm);\n","import { safeStringifyFunction } from './utilities';\n\nfunction buildCallAndWrapError() {\n  // This Object and Reflect are brand new, from a new unsafeRec, so no user\n  // code has been run or had a chance to manipulate them. Don't ever run this\n  // function *after* user code has had a chance to pollute its environment,\n  // or it could be used to gain access to BaseRealm and primal-realm Error\n  // objects.\n  const { getPrototypeOf } = Object;\n  const { apply } = Reflect;\n  const uncurryThis = fn => (thisArg, ...args) => apply(fn, thisArg, args);\n  const mapGet = uncurryThis(Map.prototype.get);\n  const setHas = uncurryThis(Set.prototype.has);\n\n  const errorNameToErrorConstructor = new Map([\n    ['EvalError', EvalError],\n    ['RangeError', RangeError],\n    ['ReferenceError', ReferenceError],\n    ['SyntaxError', SyntaxError],\n    ['TypeError', TypeError],\n    ['URIError', URIError]\n  ]);\n  const errorConstructors = new Set([\n    EvalError.prototype,\n    RangeError.prototype,\n    ReferenceError.prototype,\n    SyntaxError.prototype,\n    TypeError.prototype,\n    URIError.prototype,\n    Error.prototype\n  ]);\n\n  function callAndWrapError(target, args) {\n    try {\n      return apply(target, undefined, args);\n    } catch (err) {\n      // 1. Thrown primitives\n      if (Object(err) !== err) {\n        // err is a primitive value, which is safe to rethrow\n        throw err;\n      }\n\n      // 2. Current realm errors\n      if (setHas(errorConstructors, getPrototypeOf(err))) {\n        // err is a from the current realm, which is safe to rethrow.\n        // Object instances (normally) only contain intrinsics from the\n        // same realm. An error containing intrinsics from different\n        // realms would have to be manually constucted, which imply that\n        // such intrinsics were available, and confinement was already lost.\n        throw err;\n      }\n\n      // 3. Other realm errors\n      let eName, eMessage, eStack;\n      try {\n        // The other environment might seek to use 'err' to reach the\n        // parent's intrinsics and corrupt them. In addition, exceptions\n        // raised in the primal realm need to be converted to the current\n        // realm.\n\n        // `${err.name}` will cause string coercion of 'err.name'.\n        // If err.name is an object (probably a String of another Realm),\n        // the coercion uses err.name.toString(), which is under the control\n        // of the other realm. If err.name were a primitive (e.g. a number),\n        // it would use Number.toString(err.name), using the child's version\n        // of Number (which the child could modify to capture its argument for\n        // later use), however primitives don't have properties like .prototype\n        // so they aren't useful for an attack.\n        eName = `${err.name}`;\n        eMessage = `${err.message}`;\n        eStack = `${err.stack || eMessage}`;\n        // eName/eMessage/eStack are now realm-independent primitive strings, and\n        // safe to expose.\n      } catch (ignored) {\n        // if err.name.toString() throws, keep the (parent realm) Error away.\n        throw new Error('unknown error');\n      }\n      const ErrorConstructor =\n        mapGet(errorNameToErrorConstructor, eName) || Error;\n      try {\n        throw new ErrorConstructor(eMessage);\n      } catch (err2) {\n        err2.stack = eStack; // replace with the captured inner stack\n        throw err2;\n      }\n    }\n  }\n\n  return callAndWrapError;\n}\n\nexport const buildCallAndWrapErrorString = safeStringifyFunction(\n  buildCallAndWrapError\n);\n","// Declare shorthand functions. Sharing these declarations across modules\n// improves both consistency and minification. Unused declarations are\n// dropped by the tree shaking process.\n\n// we capture these, not just for brevity, but for security. If any code\n// modifies Object to change what 'assign' points to, the Realm shim would be\n// corrupted.\n\nexport const {\n  assign,\n  create,\n  freeze,\n  defineProperties, // Object.defineProperty is allowed to fail\n  // silentlty, use Object.defineProperties instead.\n  getOwnPropertyDescriptor,\n  getOwnPropertyDescriptors,\n  getOwnPropertyNames,\n  getPrototypeOf,\n  setPrototypeOf\n} = Object;\n\nexport const {\n  apply,\n  ownKeys // Reflect.ownKeys includes Symbols and unenumerables,\n  // unlike Object.keys()\n} = Reflect;\n\n/**\n * uncurryThis() See\n * http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n * which only lives at\n * http://web.archive.org/web/20160805225710/http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n *\n * Performance:\n * 1. The native call is about 10x faster on FF than chrome\n * 2. The version using Function.bind() is about 100x slower on FF,\n *    equal on chrome, 2x slower on Safari\n * 3. The version using a spread and Reflect.apply() is about 10x\n *    slower on FF, equal on chrome, 2x slower on Safari\n *\n * const bind = Function.prototype.bind;\n * const uncurryThis = bind.bind(bind.call);\n */\nconst uncurryThis = fn => (thisArg, ...args) => apply(fn, thisArg, args);\n\n// We also capture these for security: changes to Array.prototype after the\n// Realm shim runs shouldn't affect subsequent Realm operations.\nexport const objectHasOwnProperty = uncurryThis(\n    Object.prototype.hasOwnProperty\n  ),\n  arrayForEach = uncurryThis(Array.prototype.forEach),\n  arrayFilter = uncurryThis(Array.prototype.filter),\n  arrayPush = uncurryThis(Array.prototype.push),\n  arrayPop = uncurryThis(Array.prototype.pop),\n  arrayJoin = uncurryThis(Array.prototype.join),\n  arrayConcat = uncurryThis(Array.prototype.concat),\n  regexpTest = uncurryThis(RegExp.prototype.test),\n  stringMatch = uncurryThis(String.prototype.match),\n  stringIncludes = uncurryThis(String.prototype.includes);\n","import { getOwnPropertyDescriptor } from './commons';\nimport { assert } from './utilities';\n\n// These value properties of the global object are non-writable,\n// non-configurable data properties.\nconst frozenGlobalPropertyNames = [\n  // *** 18.1 Value Properties of the Global Object\n\n  'Infinity',\n  'NaN',\n  'undefined'\n];\n\n// All the following stdlib items have the same name on both our intrinsics\n// object and on the global object. Unlike Infinity/NaN/undefined, these\n// should all be writable and configurable. This is divided into two\n// sets. The stable ones are those the shim can freeze early because\n// we don't expect anyone will want to mutate them. The unstable ones\n// are the ones that we correctly initialize to writable and\n// configurable so that they can still be replaced or removed.\nconst stableGlobalPropertyNames = [\n  // *** 18.2 Function Properties of the Global Object\n\n  // 'eval', // comes from safeEval instead\n  'isFinite',\n  'isNaN',\n  'parseFloat',\n  'parseInt',\n\n  'decodeURI',\n  'decodeURIComponent',\n  'encodeURI',\n  'encodeURIComponent',\n\n  // *** 18.3 Constructor Properties of the Global Object\n\n  'Array',\n  'ArrayBuffer',\n  'Boolean',\n  'DataView',\n  // 'Date',  // Unstable\n  // 'Error',  // Unstable\n  'EvalError',\n  'Float32Array',\n  'Float64Array',\n  // 'Function',  // comes from safeFunction instead\n  'Int8Array',\n  'Int16Array',\n  'Int32Array',\n  'Map',\n  'Number',\n  'Object',\n  // 'Promise',  // Unstable\n  // 'Proxy',  // Unstable\n  'RangeError',\n  'ReferenceError',\n  // 'RegExp',  // Unstable\n  'Set',\n  // 'SharedArrayBuffer'  // removed on Jan 5, 2018\n  'String',\n  'Symbol',\n  'SyntaxError',\n  'TypeError',\n  'Uint8Array',\n  'Uint8ClampedArray',\n  'Uint16Array',\n  'Uint32Array',\n  'URIError',\n  'WeakMap',\n  'WeakSet',\n\n  // *** 18.4 Other Properties of the Global Object\n\n  // 'Atomics', // removed on Jan 5, 2018\n  'JSON',\n  'Math',\n  'Reflect',\n\n  // *** Annex B\n\n  'escape',\n  'unescape'\n\n  // *** ECMA-402\n\n  // 'Intl'  // Unstable\n\n  // *** ESNext\n\n  // 'Realm' // Comes from createRealmGlobalObject()\n];\n\nconst unstableGlobalPropertyNames = [\n  'Date',\n  'Error',\n  'Promise',\n  'Proxy',\n  'RegExp',\n  'Intl'\n];\n\nexport function getSharedGlobalDescs(\n  unsafeGlobal,\n  configurableGlobals = false\n) {\n  const descriptors = {};\n\n  function describe(names, writable, enumerable, configurable) {\n    for (const name of names) {\n      const desc = getOwnPropertyDescriptor(unsafeGlobal, name);\n      if (desc) {\n        // Abort if an accessor is found on the unsafe global object\n        // instead of a data property. We should never get into this\n        // non standard situation.\n        assert(\n          'value' in desc,\n          `unexpected accessor on global property: ${name}`\n        );\n\n        descriptors[name] = {\n          value: desc.value,\n          writable,\n          enumerable,\n          configurable\n        };\n      }\n    }\n  }\n\n  if (configurableGlobals) {\n    describe(frozenGlobalPropertyNames, true, false, true);\n    // The following is correct but expensive.\n    describe(stableGlobalPropertyNames, true, false, true);\n  } else {\n    // Instead, for now, we let these get optimized.\n    describe(frozenGlobalPropertyNames, false, false, false);\n    describe(stableGlobalPropertyNames, false, false, false);\n  }\n  // These we keep replaceable and removable, because we expect\n  // others, e.g., SES, may want to do so.\n  describe(unstableGlobalPropertyNames, true, false, true);\n\n  return descriptors;\n}\n","// Adapted from SES/Caja - Copyright (C) 2011 Google Inc.\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/startSES.js\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/repairES5.js\n\n/**\n * Replace the legacy accessors of Object to comply with strict mode\n * and ES2016 semantics, we do this by redefining them while in 'use strict'.\n *\n * todo: list the issues resolved\n *\n * This function can be used in two ways: (1) invoked directly to fix the primal\n * realm's Object.prototype, and (2) converted to a string to be executed\n * inside each new RootRealm to fix their Object.prototypes. Evaluation requires\n * the function to have no dependencies, so don't import anything from\n * the outside.\n */\n\n// todo: this file should be moved out to a separate repo and npm module.\nexport function repairAccessors() {\n  const {\n    defineProperty,\n    defineProperties,\n    getOwnPropertyDescriptor,\n    getPrototypeOf,\n    prototype: objectPrototype\n  } = Object;\n\n  // On some platforms, the implementation of these functions act as\n  // if they are in sloppy mode: if they're invoked badly, they will\n  // expose the global object, so we need to repair these for\n  // security. Thus it is our responsibility to fix this, and we need\n  // to include repairAccessors. E.g. Chrome in 2016.\n\n  try {\n    // Verify that the method is not callable.\n    // eslint-disable-next-line no-restricted-properties, no-underscore-dangle\n    (0, objectPrototype.__lookupGetter__)('x');\n  } catch (ignore) {\n    // Throws, no need to patch.\n    return;\n  }\n\n  function toObject(obj) {\n    if (obj === undefined || obj === null) {\n      throw new TypeError(`can't convert undefined or null to object`);\n    }\n    return Object(obj);\n  }\n\n  function asPropertyName(obj) {\n    if (typeof obj === 'symbol') {\n      return obj;\n    }\n    return `${obj}`;\n  }\n\n  function aFunction(obj, accessor) {\n    if (typeof obj !== 'function') {\n      throw TypeError(`invalid ${accessor} usage`);\n    }\n    return obj;\n  }\n\n  defineProperties(objectPrototype, {\n    __defineGetter__: {\n      value: function __defineGetter__(prop, func) {\n        const O = toObject(this);\n        defineProperty(O, prop, {\n          get: aFunction(func, 'getter'),\n          enumerable: true,\n          configurable: true\n        });\n      }\n    },\n    __defineSetter__: {\n      value: function __defineSetter__(prop, func) {\n        const O = toObject(this);\n        defineProperty(O, prop, {\n          set: aFunction(func, 'setter'),\n          enumerable: true,\n          configurable: true\n        });\n      }\n    },\n    __lookupGetter__: {\n      value: function __lookupGetter__(prop) {\n        let O = toObject(this);\n        prop = asPropertyName(prop);\n        let desc;\n        while (O && !(desc = getOwnPropertyDescriptor(O, prop))) {\n          O = getPrototypeOf(O);\n        }\n        return desc && desc.get;\n      }\n    },\n    __lookupSetter__: {\n      value: function __lookupSetter__(prop) {\n        let O = toObject(this);\n        prop = asPropertyName(prop);\n        let desc;\n        while (O && !(desc = getOwnPropertyDescriptor(O, prop))) {\n          O = getPrototypeOf(O);\n        }\n        return desc && desc.set;\n      }\n    }\n  });\n}\n","// Adapted from SES/Caja\n// Copyright (C) 2011 Google Inc.\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/startSES.js\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/repairES5.js\n\n/**\n * This block replaces the original Function constructor, and the original\n * %GeneratorFunction% %AsyncFunction% and %AsyncGeneratorFunction%, with\n * safe replacements that throw if invoked.\n *\n * These are all reachable via syntax, so it isn't sufficient to just\n * replace global properties with safe versions. Our main goal is to prevent\n * access to the Function constructor through these starting points.\n\n * After this block is done, the originals must no longer be reachable, unless\n * a copy has been made, and funtions can only be created by syntax (using eval)\n * or by invoking a previously saved reference to the originals.\n */\n\n// todo: this file should be moved out to a separate repo and npm module.\nexport function repairFunctions() {\n  const { defineProperties, getPrototypeOf, setPrototypeOf } = Object;\n\n  /**\n   * The process to repair constructors:\n   * 1. Create an instance of the function by evaluating syntax\n   * 2. Obtain the prototype from the instance\n   * 3. Create a substitute tamed constructor\n   * 4. Replace the original constructor with the tamed constructor\n   * 5. Replace tamed constructor prototype property with the original one\n   * 6. Replace its [[Prototype]] slot with the tamed constructor of Function\n   */\n  function repairFunction(name, declaration) {\n    let FunctionInstance;\n    try {\n      // eslint-disable-next-line no-new-func\n      FunctionInstance = (0, eval)(declaration);\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        // Prevent failure on platforms where async and/or generators\n        // are not supported.\n        return;\n      }\n      // Re-throw\n      throw e;\n    }\n    const FunctionPrototype = getPrototypeOf(FunctionInstance);\n\n    // Prevents the evaluation of source when calling constructor on the\n    // prototype of functions.\n    const TamedFunction = function() {\n      throw new TypeError('Not available');\n    };\n    defineProperties(TamedFunction, { name: { value: name } });\n\n    // (new Error()).constructors does not inherit from Function, because Error\n    // was defined before ES6 classes. So we don't need to repair it too.\n\n    // (Error()).constructor inherit from Function, which gets a tamed\n    // constructor here.\n\n    // todo: in an ES6 class that does not inherit from anything, what does its\n    // constructor inherit from? We worry that it inherits from Function, in\n    // which case instances could give access to unsafeFunction. markm says\n    // we're fine: the constructor inherits from Object.prototype\n\n    // This line replaces the original constructor in the prototype chain\n    // with the tamed one. No copy of the original is peserved.\n    defineProperties(FunctionPrototype, {\n      constructor: { value: TamedFunction }\n    });\n\n    // This line sets the tamed constructor's prototype data property to\n    // the original one.\n    defineProperties(TamedFunction, {\n      prototype: { value: FunctionPrototype }\n    });\n\n    if (TamedFunction !== Function.prototype.constructor) {\n      // Ensures that all functions meet \"instanceof Function\" in a realm.\n      setPrototypeOf(TamedFunction, Function.prototype.constructor);\n    }\n  }\n\n  // Here, the order of operation is important: Function needs to be repaired\n  // first since the other repaired constructors need to inherit from the tamed\n  // Function function constructor.\n\n  // note: this really wants to be part of the standard, because new\n  // constructors may be added in the future, reachable from syntax, and this\n  // list must be updated to match.\n\n  // \"plain arrow functions\" inherit from Function.prototype\n\n  repairFunction('Function', '(function(){})');\n  repairFunction('GeneratorFunction', '(function*(){})');\n  repairFunction('AsyncFunction', '(async function(){})');\n  repairFunction('AsyncGeneratorFunction', '(async function*(){})');\n}\n","// this module must never be importable outside the Realm shim itself\nimport { buildCallAndWrapErrorString } from './callAndWrapError';\nimport { getSharedGlobalDescs } from './stdlib';\nimport { repairAccessors } from './repair/accessors';\nimport { repairFunctions } from './repair/functions';\nimport { safeStringifyFunction } from './utilities';\nimport { freeze } from './commons';\n\n// A \"context\" is a fresh unsafe Realm as given to us by existing platforms.\n// We need this to implement the shim. However, when Realms land for real,\n// this feature will be provided by the underlying engine instead.\n\n// note: in a node module, the top-level 'this' is not the global object\n// (it's *something* but we aren't sure what), however an indirect eval of\n// 'this' will be the correct global object.\n\nconst unsafeGlobalSrc = \"'use strict'; this\";\nconst unsafeGlobalEvalSrc = `(0, eval)(\"'use strict'; this\")`;\n\n// This method is only exported for testing purposes.\nexport function createNewUnsafeGlobalForNode() {\n  // Note that webpack and others will shim 'vm' including the method\n  // 'runInNewContext', so the presence of vm is not a useful check\n\n  // TODO: Find a better test that works with bundlers\n  // eslint-disable-next-line no-new-func\n  const isNode = new Function(\n    'try {return this===global}catch(e){return false}'\n  )();\n\n  if (!isNode) {\n    return undefined;\n  }\n\n  // eslint-disable-next-line global-require\n  const vm = require('vm');\n\n  // Use unsafeGlobalEvalSrc to ensure we get the right 'this'.\n  const unsafeGlobal = vm.runInNewContext(unsafeGlobalEvalSrc);\n\n  return unsafeGlobal;\n}\n\n// This method is only exported for testing purposes.\nexport function createNewUnsafeGlobalForBrowser() {\n  if (typeof document === 'undefined') {\n    return undefined;\n  }\n  const iframe = document.createElement('iframe');\n  iframe.style.display = 'none';\n\n  document.body.appendChild(iframe);\n  const unsafeGlobal = iframe.contentWindow.eval(unsafeGlobalSrc);\n\n  // We keep the iframe attached to the DOM because removing it\n  // causes its global object to lose intrinsics, its eval()\n  // function to evaluate code, etc.\n\n  // TODO: can we remove and garbage-collect the iframes?\n\n  return unsafeGlobal;\n}\n\nconst getNewUnsafeGlobal = () => {\n  const newUnsafeGlobalForBrowser = createNewUnsafeGlobalForBrowser();\n  const newUnsafeGlobalForNode = createNewUnsafeGlobalForNode();\n  if (\n    (!newUnsafeGlobalForBrowser && !newUnsafeGlobalForNode) ||\n    (newUnsafeGlobalForBrowser && newUnsafeGlobalForNode)\n  ) {\n    throw new Error('unexpected platform, unable to create Realm');\n  }\n  return newUnsafeGlobalForBrowser || newUnsafeGlobalForNode;\n};\n\n// The unsafeRec is shim-specific. It acts as the mechanism to obtain a fresh\n// set of intrinsics together with their associated eval and Function\n// evaluators. These must be used as a matched set, since the evaluators are\n// tied to a set of intrinsics, aka the \"undeniables\". If it were possible to\n// mix-and-match them from different contexts, that would enable some\n// attacks.\nfunction createUnsafeRec(\n  unsafeGlobal,\n  allShims = [],\n  configurableGlobals = false\n) {\n  const sharedGlobalDescs = getSharedGlobalDescs(\n    unsafeGlobal,\n    configurableGlobals\n  );\n\n  const unsafeEval = unsafeGlobal.eval;\n  const unsafeFunction = unsafeGlobal.Function;\n  const callAndWrapError = unsafeEval(buildCallAndWrapErrorString)();\n\n  return freeze({\n    unsafeGlobal,\n    sharedGlobalDescs,\n    unsafeEval,\n    unsafeFunction,\n    callAndWrapError,\n    allShims\n  });\n}\n\nconst repairAccessorsString = safeStringifyFunction(repairAccessors);\nconst repairFunctionsString = safeStringifyFunction(repairFunctions);\n\n// Create a new unsafeRec from a brand new context, with new intrinsics and a\n// new global object\nexport function createNewUnsafeRec(allShims, configurableGlobals = false) {\n  const unsafeGlobal = getNewUnsafeGlobal();\n  const unsafeRec = createUnsafeRec(\n    unsafeGlobal,\n    allShims,\n    configurableGlobals\n  );\n  const { unsafeEval } = unsafeRec;\n  unsafeEval(repairAccessorsString)();\n  unsafeEval(repairFunctionsString)();\n  return unsafeRec;\n}\n\n// Create a new unsafeRec from the current context, where the Realm shim is\n// being parsed and executed, aka the \"Primal Realm\"\nexport function createCurrentUnsafeRec() {\n  const unsafeEval = eval;\n  const unsafeGlobal = unsafeEval(unsafeGlobalSrc);\n  repairAccessors();\n  repairFunctions();\n  return createUnsafeRec(unsafeGlobal);\n}\n","import {\n  arrayFilter,\n  getOwnPropertyDescriptor,\n  getOwnPropertyNames,\n  objectHasOwnProperty,\n  regexpTest\n} from './commons';\n\n// todo: think about how this interacts with endowments, check for conflicts\n// between the names being optimized and the ones added by endowments\n\n/**\n * Simplified validation of indentifier names: may only contain alphanumeric\n * characters (or \"$\" or \"_\"), and may not start with a digit. This is safe\n * and does not reduces the compatibility of the shim. The motivation for\n * this limitation was to decrease the complexity of the implementation,\n * and to maintain a resonable level of performance.\n * Note: \\w is equivalent [a-zA-Z_0-9]\n * See 11.6.1 Identifier Names\n */\nconst identifierPattern = /^[a-zA-Z_$][\\w$]*$/;\n\n/**\n * In JavaScript you cannot use these reserved words as variables.\n * See 11.6.1 Identifier Names\n */\nconst keywords = new Set([\n  // 11.6.2.1 Keywords\n  'await',\n  'break',\n  'case',\n  'catch',\n  'class',\n  'const',\n  'continue',\n  'debugger',\n  'default',\n  'delete',\n  'do',\n  'else',\n  'export',\n  'extends',\n  'finally',\n  'for',\n  'function',\n  'if',\n  'import',\n  'in',\n  'instanceof',\n  'new',\n  'return',\n  'super',\n  'switch',\n  'this',\n  'throw',\n  'try',\n  'typeof',\n  'var',\n  'void',\n  'while',\n  'with',\n  'yield',\n\n  // Also reserved when parsing strict mode code\n  'let',\n  'static',\n\n  // 11.6.2.2 Future Reserved Words\n  'enum',\n\n  // Also reserved when parsing strict mode code\n  'implements',\n  'package',\n  'protected',\n  'interface',\n  'private',\n  'public',\n\n  // Reserved but not mentioned in specs\n  'await',\n\n  'null',\n  'true',\n  'false',\n\n  'this',\n  'arguments'\n]);\n\n/**\n * getOptimizableGlobals()\n * What variable names might it bring into scope? These include all\n * property names which can be variable names, including the names\n * of inherited properties. It excludes symbols and names which are\n * keywords. We drop symbols safely. Currently, this shim refuses\n * service if any of the names are keywords or keyword-like. This is\n * safe and only prevent performance optimization.\n */\nexport function getOptimizableGlobals(globalObject, localObject = {}) {\n  const globalNames = getOwnPropertyNames(globalObject);\n  // getOwnPropertyNames does ignore Symbols so we don't need this extra check:\n  // typeof name === 'string' &&\n  const constants = arrayFilter(globalNames, name => {\n    // Exclude globals that will be hidden behind an object positioned\n    // closer in the resolution scope chain, typically the endowments.\n    if (name in localObject) {\n      return false;\n    }\n\n    // Ensure we have a valid identifier. We use regexpTest rather than\n    // /../.test() to guard against the case where RegExp has been poisoned.\n    if (\n      name === 'eval' ||\n      keywords.has(name) ||\n      !regexpTest(identifierPattern, name)\n    ) {\n      return false;\n    }\n\n    const desc = getOwnPropertyDescriptor(globalObject, name);\n    return (\n      //\n      // The getters will not have .writable, don't let the falsyness of\n      // 'undefined' trick us: test with === false, not ! . However descriptors\n      // inherit from the (potentially poisoned) global object, so we might see\n      // extra properties which weren't really there. Accessor properties have\n      // 'get/set/enumerable/configurable', while data properties have\n      // 'value/writable/enumerable/configurable'.\n      desc.configurable === false &&\n      desc.writable === false &&\n      //\n      // Checks for data properties because they're the only ones we can\n      // optimize (accessors are most likely non-constant). Descriptors can't\n      // can't have accessors and value properties at the same time, therefore\n      // this check is sufficient. Using explicit own property deal with the\n      // case where Object.prototype has been poisoned.\n      objectHasOwnProperty(desc, 'value')\n    );\n  });\n\n  return constants;\n}\n","import { safeStringifyFunction } from './utilities';\n\n/**\n * ScopeHandler manages a Proxy which serves as the global scope for the\n * safeEvaluator operation (the Proxy is the argument of a 'with' binding).\n * As described in createSafeEvaluator(), it has several functions:\n * - allow the very first (and only the very first) use of 'eval' to map to\n *   the real (unsafe) eval function, so it acts as a 'direct eval' and can\n *    access its lexical scope (which maps to the 'with' binding, which the\n *   ScopeHandler also controls).\n * - ensure that all subsequent uses of 'eval' map to the safeEvaluator,\n *   which lives as the 'eval' property of the safeGlobal.\n * - route all other property lookups at the safeGlobal.\n * - hide the unsafeGlobal which lives on the scope chain above the 'with'.\n * - ensure the Proxy invariants despite some global properties being frozen.\n *\n * @returns {ProxyHandler<any> & Record<string, any>}\n */\nexport function buildScopeHandler(\n  unsafeRec,\n  safeGlobal,\n  endowments = {},\n  sloppyGlobals = false\n) {\n  const { unsafeGlobal, unsafeEval } = unsafeRec;\n\n  const { freeze, getOwnPropertyDescriptor } = Object;\n  const { get: reflectGet, set: reflectSet } = Reflect;\n\n  /**\n   * alwaysThrowHandler is a proxy handler which throws on any trap called.\n   * It's made from a proxy with a get trap that throws. Its target is\n   * an immutable (frozen) object and is safe to share, except accross realms\n   */\n  const alwaysThrowHandler = new Proxy(freeze({}), {\n    get(target, prop) {\n      // todo: replace with throwTantrum\n      throw new TypeError(\n        `unexpected scope handler trap called: ${String(prop)}`\n      );\n    }\n  });\n\n  return {\n    // The scope handler throws if any trap other than get/set/has are run\n    // (e.g. getOwnPropertyDescriptors, apply, getPrototypeOf).\n    // eslint-disable-next-line no-proto\n    __proto__: alwaysThrowHandler,\n\n    // This flag allow us to determine if the eval() call is an done by the\n    // realm's code or if it is user-land invocation, so we can react differently.\n    // We use a property and not an accessor to avoid increasing the stack trace\n    // and reduce the possibility of OOM.\n    useUnsafeEvaluator: false,\n\n    get(shadow, prop) {\n      if (typeof prop === 'symbol') {\n        // Safe to return a primal realm Object here because the only code that\n        // can do a get() on a non-string is the internals of with() itself,\n        // and the only thing it does is to look for properties on it. User\n        // code cannot do a lookup on non-strings.\n        return undefined;\n      }\n\n      // Special treatment for eval. The very first lookup of 'eval' gets the\n      // unsafe (real direct) eval, so it will get the lexical scope that uses\n      // the 'with' context.\n      if (prop === 'eval') {\n        // test that it is true rather than merely truthy\n        if (this.useUnsafeEvaluator === true) {\n          // revoke before use\n          this.useUnsafeEvaluator = false;\n          return unsafeEval;\n        }\n        // fall through\n      }\n\n      // Properties of the endowments.\n      if (prop in endowments) {\n        // Ensure that the 'this' value on getters resolves\n        // to the safeGlobal, not to the endowments object.\n        return reflectGet(endowments, prop, safeGlobal);\n      }\n\n      // Properties of the global.\n      return reflectGet(safeGlobal, prop);\n    },\n\n    // eslint-disable-next-line class-methods-use-this\n    set(shadow, prop, value) {\n      // Properties of the endowments.\n      if (prop in endowments) {\n        const desc = getOwnPropertyDescriptor(endowments, prop);\n        if ('value' in desc) {\n          // Work around a peculiar behavior in the specs, where\n          // value properties are defined on the receiver.\n          return reflectSet(endowments, prop, value);\n        }\n        // Ensure that the 'this' value on setters resolves\n        // to the safeGlobal, not to the endowments object.\n        return reflectSet(endowments, prop, value, safeGlobal);\n      }\n\n      // Properties of the global.\n      return reflectSet(safeGlobal, prop, value);\n    },\n\n    // we need has() to return false for some names to prevent the lookup  from\n    // climbing the scope chain and eventually reaching the unsafeGlobal\n    // object, which is bad.\n\n    // note: unscopables! every string in Object[Symbol.unscopables]\n\n    // todo: we'd like to just have has() return true for everything, and then\n    // use get() to raise a ReferenceError for anything not on the safe global.\n    // But we want to be compatible with ReferenceError in the normal case and\n    // the lack of ReferenceError in the 'typeof' case. Must either reliably\n    // distinguish these two cases (the trap behavior might be different), or\n    // we rely on a mandatory source-to-source transform to change 'typeof abc'\n    // to XXX. We already need a mandatory parse to prevent the 'import',\n    // since it's a special form instead of merely being a global variable/\n\n    // note: if we make has() return true always, then we must implement a\n    // set() trap to avoid subverting the protection of strict mode (it would\n    // accept assignments to undefined globals, when it ought to throw\n    // ReferenceError for such assignments)\n\n    has(shadow, prop) {\n      // proxies stringify 'prop', so no TOCTTOU danger here\n\n      if (sloppyGlobals) {\n        // Everything is potentially available.\n        return true;\n      }\n\n      // unsafeGlobal: hide all properties of unsafeGlobal at the\n      // expense of 'typeof' being wrong for those properties. For\n      // example, in the browser, evaluating 'document = 3', will add\n      // a property to safeGlobal instead of throwing a\n      // ReferenceError.\n      if (\n        prop === 'eval' ||\n        prop in endowments ||\n        prop in safeGlobal ||\n        prop in unsafeGlobal\n      ) {\n        return true;\n      }\n\n      return false;\n    },\n\n    // note: this is likely a bug of safari\n    // https://bugs.webkit.org/show_bug.cgi?id=195534\n\n    getPrototypeOf() {\n      return null;\n    }\n  };\n}\n\nexport const buildScopeHandlerString = safeStringifyFunction(buildScopeHandler);\n","import { safeStringifyFunction } from './utilities';\n\nfunction buildSafeEval(unsafeRec, safeEvalOperation) {\n  const { callAndWrapError } = unsafeRec;\n\n  const { defineProperties } = Object;\n\n  // We use the the concise method syntax to create an eval without a\n  // [[Construct]] behavior (such that the invocation \"new eval()\" throws\n  // TypeError: eval is not a constructor\"), but which still accepts a\n  // 'this' binding.\n  const safeEval = {\n    eval() {\n      return callAndWrapError(safeEvalOperation, arguments);\n    }\n  }.eval;\n\n  // safeEval's prototype RootRealm's value and instanceof Function\n  // is true inside the realm. It doesn't point at the primal realm\n  // value, and there is no defense against leaking primal realm\n  // intrinsics.\n\n  defineProperties(safeEval, {\n    toString: {\n      // We break up the following literal string so that an\n      // apparent direct eval syntax does not appear in this\n      // file. Thus, we avoid rejection by the overly eager\n      // rejectDangerousSources.\n      value: () => `function ${'eval'}() { [shim code] }`,\n      writable: false,\n      enumerable: false,\n      configurable: true\n    }\n  });\n\n  return safeEval;\n}\nexport const buildSafeEvalString = safeStringifyFunction(buildSafeEval);\n","import { safeStringifyFunction } from './utilities';\n\nfunction buildSafeFunction(unsafeRec, safeFunctionOperation) {\n  const { callAndWrapError, unsafeFunction } = unsafeRec;\n\n  const { defineProperties } = Object;\n\n  const safeFunction = function Function() {\n    return callAndWrapError(safeFunctionOperation, arguments);\n  };\n\n  // Ensure that Function from any compartment in a root realm can be used\n  // with instance checks in any compartment of the same root realm.\n\n  defineProperties(safeFunction, {\n    // Ensure that any function created in any compartment in a root realm is an\n    // instance of Function in any compartment of the same root ralm.\n    prototype: { value: unsafeFunction.prototype },\n\n    // Provide a custom output without overwriting the\n    // Function.prototype.toString which is called by some third-party\n    // libraries.\n    toString: {\n      value: () => 'function Function() { [shim code] }',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    }\n  });\n\n  return safeFunction;\n}\nexport const buildSafeFunctionString = safeStringifyFunction(buildSafeFunction);\n","import { safeStringifyFunction } from './utilities';\n\nexport function applyTransforms(rewriterState, transforms) {\n  const { create, getOwnPropertyDescriptors } = Object;\n  const { apply } = Reflect;\n  const uncurryThis = fn => (thisArg, ...args) => apply(fn, thisArg, args);\n  const arrayReduce = uncurryThis(Array.prototype.reduce);\n\n  // Clone before calling transforms.\n  rewriterState = {\n    src: `${rewriterState.src}`,\n    endowments: create(\n      null,\n      getOwnPropertyDescriptors(rewriterState.endowments)\n    )\n  };\n\n  // Rewrite the source, threading through rewriter state as necessary.\n  rewriterState = arrayReduce(\n    transforms,\n    (rs, transform) => (transform.rewrite ? transform.rewrite(rs) : rs),\n    rewriterState\n  );\n\n  // Clone after transforms\n  rewriterState = {\n    src: `${rewriterState.src}`,\n    endowments: create(\n      null,\n      getOwnPropertyDescriptors(rewriterState.endowments)\n    )\n  };\n\n  return rewriterState;\n}\n\nexport const applyTransformsString = safeStringifyFunction(applyTransforms);\n","// https://www.ecma-international.org/ecma-262/9.0/index.html#sec-html-like-comments\n// explains that JavaScript parsers may or may not recognize html\n// comment tokens \"<\" immediately followed by \"!--\" and \"--\"\n// immediately followed by \">\" in non-module source text, and treat\n// them as a kind of line comment. Since otherwise both of these can\n// appear in normal JavaScript source code as a sequence of operators,\n// we have the terrifying possibility of the same source code parsing\n// one way on one correct JavaScript implementation, and another way\n// on another.\n//\n// This shim takes the conservative strategy of just rejecting source\n// text that contains these strings anywhere. Note that this very\n// source file is written strangely to avoid mentioning these\n// character strings explicitly.\n\n// We do not write the regexp in a straightforward way, so that an\n// apparennt html comment does not appear in this file. Thus, we avoid\n// rejection by the overly eager rejectDangerousSources.\nconst htmlCommentPattern = new RegExp(`(?:${'<'}!--|--${'>'})`);\n\nfunction rejectHtmlComments(s) {\n  const index = s.search(htmlCommentPattern);\n  if (index !== -1) {\n    const linenum = s.slice(0, index).split('\\n').length; // more or less\n    throw new SyntaxError(\n      `possible html comment syntax rejected around line ${linenum}`\n    );\n  }\n}\n\n// The proposed dynamic import expression is the only syntax currently\n// proposed, that can appear in non-module JavaScript code, that\n// enables direct access to the outside world that cannot be\n// surpressed or intercepted without parsing and rewriting. Instead,\n// this shim conservatively rejects any source text that seems to\n// contain such an expression. To do this safely without parsing, we\n// must also reject some valid programs, i.e., those containing\n// apparent import expressions in literal strings or comments.\n\n// The current conservative rule looks for the identifier \"import\"\n// followed by either an open paren or something that looks like the\n// beginning of a comment. We assume that we do not need to worry\n// about html comment syntax because that was already rejected by\n// rejectHtmlComments.\n\n// this \\s *must* match all kinds of syntax-defined whitespace. If e.g.\n// U+2028 (LINE SEPARATOR) or U+2029 (PARAGRAPH SEPARATOR) is treated as\n// whitespace by the parser, but not matched by /\\s/, then this would admit\n// an attack like: import\\u2028('power.js') . We're trying to distinguish\n// something like that from something like importnotreally('power.js') which\n// is perfectly safe.\n\nconst importPattern = /\\bimport\\s*(?:\\(|\\/[/*])/;\n\nfunction rejectImportExpressions(s) {\n  const index = s.search(importPattern);\n  if (index !== -1) {\n    const linenum = s.slice(0, index).split('\\n').length; // more or less\n    throw new SyntaxError(\n      `possible import expression rejected around line ${linenum}`\n    );\n  }\n}\n\n// The shim cannot correctly emulate a direct eval as explained at\n// https://github.com/Agoric/realms-shim/issues/12\n// Without rejecting apparent direct eval syntax, we would\n// accidentally evaluate these with an emulation of indirect eval. Tp\n// prevent future compatibility problems, in shifting from use of the\n// shim to genuine platform support for the proposal, we should\n// instead statically reject code that seems to contain a direct eval\n// expression.\n//\n// As with the dynamic import expression, to avoid a full parse, we do\n// this approximately with a regexp, that will also reject strings\n// that appear safely in comments or strings. Unlike dynamic import,\n// if we miss some, this only creates future compat problems, not\n// security problems. Thus, we are only trying to catch innocent\n// occurrences, not malicious one. In particular, `(eval)(...)` is\n// direct eval syntax that would not be caught by the following regexp.\n\nconst someDirectEvalPattern = /\\beval\\s*(?:\\(|\\/[/*])/;\n\nfunction rejectSomeDirectEvalExpressions(s) {\n  const index = s.search(someDirectEvalPattern);\n  if (index !== -1) {\n    const linenum = s.slice(0, index).split('\\n').length; // more or less\n    throw new SyntaxError(\n      `possible direct eval expression rejected around line ${linenum}`\n    );\n  }\n}\n\nexport function rejectDangerousSources(s) {\n  rejectHtmlComments(s);\n  rejectImportExpressions(s);\n  rejectSomeDirectEvalExpressions(s);\n}\n\n// Export a rewriter transform.\nexport const rejectDangerousSourcesTransform = {\n  rewrite(rs) {\n    rejectDangerousSources(rs.src);\n    return rs;\n  }\n};\n","// Portions adapted from V8 - Copyright 2016 the V8 project authors.\n// https://github.com/v8/v8/blob/master/src/builtins/builtins-function.cc\n\nimport { assert, throwTantrum } from './utilities';\nimport {\n  apply,\n  arrayConcat,\n  arrayJoin,\n  arrayPop,\n  getPrototypeOf,\n  regexpTest,\n  stringIncludes\n} from './commons';\nimport { getOptimizableGlobals } from './optimizer';\nimport { buildScopeHandlerString } from './scopeHandler';\nimport { buildSafeEvalString } from './safeEval';\nimport { buildSafeFunctionString } from './safeFunction';\nimport { applyTransformsString } from './transforms';\nimport { rejectDangerousSourcesTransform } from './sourceParser';\n\nfunction buildOptimizer(constants) {\n  // No need to build an oprimizer when there are no constants.\n  if (constants.length === 0) return '';\n  // Use 'this' to avoid going through the scope proxy, which is unecessary\n  // since the optimizer only needs references to the safe global.\n  return `const {${arrayJoin(constants, ',')}} = this;`;\n}\n\nfunction createScopedEvaluatorFactory(unsafeRec, constants) {\n  const { unsafeFunction } = unsafeRec;\n\n  const optimizer = buildOptimizer(constants);\n\n  // Create a function in sloppy mode, so that we can use 'with'. It returns\n  // a function in strict mode that evaluates the provided code using direct\n  // eval, and thus in strict mode in the same scope. We must be very careful\n  // to not create new names in this scope\n\n  // 1: we use 'with' (around a Proxy) to catch all free variable names. The\n  // first 'arguments[0]' holds the Proxy which safely wraps the safeGlobal\n  // 2: 'optimizer' catches common variable names for speed\n  // 3: The inner strict function is effectively passed two parameters:\n  //    a) its arguments[0] is the source to be directly evaluated.\n  //    b) its 'this' is the this binding seen by the code being\n  //       directly evaluated.\n\n  // everything in the 'optimizer' string is looked up in the proxy\n  // (including an 'arguments[0]', which points at the Proxy). 'function' is\n  // a keyword, not a variable, so it is not looked up. then 'eval' is looked\n  // up in the proxy, that's the first time it is looked up after\n  // useUnsafeEvaluator is turned on, so the proxy returns the real the\n  // unsafeEval, which satisfies the IsDirectEvalTrap predicate, so it uses\n  // the direct eval and gets the lexical scope. The second 'arguments[0]' is\n  // looked up in the context of the inner function. The *contents* of\n  // arguments[0], because we're using direct eval, are looked up in the\n  // Proxy, by which point the useUnsafeEvaluator switch has been flipped\n  // back to 'false', so any instances of 'eval' in that string will get the\n  // safe evaluator.\n\n  return unsafeFunction(`\n    with (arguments[0]) {\n      ${optimizer}\n      return function() {\n        'use strict';\n        return eval(arguments[0]);\n      };\n    }\n  `);\n}\n\nexport function createSafeEvaluatorFactory(\n  unsafeRec,\n  safeGlobal,\n  transforms,\n  sloppyGlobals\n) {\n  const { unsafeEval } = unsafeRec;\n  const applyTransforms = unsafeEval(applyTransformsString);\n\n  function factory(endowments = {}, options = {}) {\n    // todo clone all arguments passed to returned function\n    const localTransforms = options.transforms || [];\n    const realmTransforms = transforms || [];\n\n    const mandatoryTransforms = [rejectDangerousSourcesTransform];\n    const allTransforms = arrayConcat(\n      localTransforms,\n      realmTransforms,\n      mandatoryTransforms\n    );\n\n    function safeEvalOperation(src) {\n      let rewriterState = { src, endowments };\n      rewriterState = applyTransforms(rewriterState, allTransforms);\n\n      // Combine all optimizable globals.\n      const globalConstants = getOptimizableGlobals(\n        safeGlobal,\n        rewriterState.endowments\n      );\n      const localConstants = getOptimizableGlobals(rewriterState.endowments);\n      const constants = arrayConcat(globalConstants, localConstants);\n\n      const scopedEvaluatorFactory = createScopedEvaluatorFactory(\n        unsafeRec,\n        constants\n      );\n\n      const scopeHandler = unsafeEval(buildScopeHandlerString)(\n        unsafeRec,\n        safeGlobal,\n        rewriterState.endowments,\n        sloppyGlobals\n      );\n      const scopeProxyRevocable = Proxy.revocable({}, scopeHandler);\n      const scopeProxy = scopeProxyRevocable.proxy;\n      const scopedEvaluator = apply(scopedEvaluatorFactory, safeGlobal, [\n        scopeProxy\n      ]);\n\n      scopeHandler.useUnsafeEvaluator = true;\n      let err;\n      try {\n        // Ensure that \"this\" resolves to the safe global.\n        return apply(scopedEvaluator, safeGlobal, [rewriterState.src]);\n      } catch (e) {\n        // stash the child-code error in hopes of debugging the internal failure\n        err = e;\n        throw e;\n      } finally {\n        if (scopeHandler.useUnsafeEvaluator) {\n          // the proxy switches this off immediately after ths\n          // first access, but if that's not the case we prevent\n          // further variable resolution on the scope and abort.\n          scopeProxyRevocable.revoke();\n          throwTantrum('handler did not revoke useUnsafeEvaluator', err);\n        }\n      }\n    }\n\n    return safeEvalOperation;\n  }\n\n  return factory;\n}\n\nexport function createSafeEvaluator(unsafeRec, safeEvalOperation) {\n  const { unsafeEval, unsafeFunction } = unsafeRec;\n\n  const safeEval = unsafeEval(buildSafeEvalString)(\n    unsafeRec,\n    safeEvalOperation\n  );\n\n  assert(getPrototypeOf(safeEval).constructor !== Function, 'hide Function');\n  assert(\n    getPrototypeOf(safeEval).constructor !== unsafeFunction,\n    'hide unsafeFunction'\n  );\n\n  return safeEval;\n}\n\nexport function createSafeEvaluatorWhichTakesEndowments(safeEvaluatorFactory) {\n  return (x, endowments, options = {}) =>\n    safeEvaluatorFactory(endowments, options)(x);\n}\n\n/**\n * A safe version of the native Function which relies on\n * the safety of evalEvaluator for confinement.\n */\nexport function createFunctionEvaluator(unsafeRec, safeEvalOperation) {\n  const { unsafeGlobal, unsafeEval, unsafeFunction } = unsafeRec;\n\n  function safeFunctionOperation(...params) {\n    const functionBody = `${arrayPop(params) || ''}`;\n    let functionParams = `${arrayJoin(params, ',')}`;\n    if (!regexpTest(/^[\\w\\s,]*$/, functionParams)) {\n      throw new SyntaxError(\n        'shim limitation: Function arg must be simple ASCII identifiers, possibly separated by commas: no default values, pattern matches, or non-ASCII parameter names'\n      );\n      // this protects against Matt Austin's clever attack:\n      // Function(\"arg=`\", \"/*body`){});({x: this/**/\")\n      // which would turn into\n      //     (function(arg=`\n      //     /*``*/){\n      //      /*body`){});({x: this/**/\n      //     })\n      // which parses as a default argument of `\\n/*``*/){\\n/*body` , which\n      // is a pair of template literals back-to-back (so the first one\n      // nominally evaluates to the parser to use on the second one), which\n      // can't actually execute (because the first literal evals to a string,\n      // which can't be a parser function), but that doesn't matter because\n      // the function is bypassed entirely. When that gets evaluated, it\n      // defines (but does not invoke) a function, then evaluates a simple\n      // {x: this} expression, giving access to the safe global.\n    }\n\n    // Is this a real functionBody, or is someone attempting an injection\n    // attack? This will throw a SyntaxError if the string is not actually a\n    // function body. We coerce the body into a real string above to prevent\n    // someone from passing an object with a toString() that returns a safe\n    // string the first time, but an evil string the second time.\n    // eslint-disable-next-line no-new, new-cap\n    new unsafeFunction(functionBody);\n\n    if (stringIncludes(functionParams, ')')) {\n      // If the formal parameters string include ) - an illegal\n      // character - it may make the combined function expression\n      // compile. We avoid this problem by checking for this early on.\n\n      // note: v8 throws just like this does, but chrome accepts\n      // e.g. 'a = new Date()'\n      throw new unsafeGlobal.SyntaxError(\n        'shim limitation: Function arg string contains parenthesis'\n      );\n      // todo: shim integrity threat if they change SyntaxError\n    }\n\n    // todo: check to make sure this .length is safe. markm says safe.\n    if (functionParams.length > 0) {\n      // If the formal parameters include an unbalanced block comment, the\n      // function must be rejected. Since JavaScript does not allow nested\n      // comments we can include a trailing block comment to catch this.\n      functionParams += '\\n/*``*/';\n    }\n\n    const src = `(function(${functionParams}){\\n${functionBody}\\n})`;\n\n    return safeEvalOperation(src);\n  }\n\n  const safeFunction = unsafeEval(buildSafeFunctionString)(\n    unsafeRec,\n    safeFunctionOperation\n  );\n\n  assert(\n    getPrototypeOf(safeFunction).constructor !== Function,\n    'hide Function'\n  );\n  assert(\n    getPrototypeOf(safeFunction).constructor !== unsafeFunction,\n    'hide unsafeFunction'\n  );\n\n  return safeFunction;\n}\n","import { buildChildRealm, buildChildRealmString } from './childRealm';\nimport { createNewUnsafeRec, createCurrentUnsafeRec } from './unsafeRec';\nimport {\n  createSafeEvaluatorFactory,\n  createSafeEvaluator,\n  createSafeEvaluatorWhichTakesEndowments,\n  createFunctionEvaluator\n} from './evaluators';\nimport { assert } from './utilities';\nimport { create, defineProperties, freeze, arrayConcat } from './commons';\n\n// Mimic private members on the realm instances.\n// We define it in the same module and do not export it.\nconst RealmRecForRealmInstance = new WeakMap();\n\nfunction getRealmRecForRealmInstance(realm) {\n  // Detect non-objects.\n  assert(Object(realm) === realm, 'bad object, not a Realm instance');\n  // Realm instance has no realmRec. Should not proceed.\n  assert(RealmRecForRealmInstance.has(realm), 'Realm instance has no record');\n\n  return RealmRecForRealmInstance.get(realm);\n}\n\nfunction registerRealmRecForRealmInstance(realm, realmRec) {\n  // Detect non-objects.\n  assert(Object(realm) === realm, 'bad object, not a Realm instance');\n  // Attempt to change an existing realmRec on a realm instance. Should not proceed.\n  assert(\n    !RealmRecForRealmInstance.has(realm),\n    'Realm instance already has a record'\n  );\n\n  RealmRecForRealmInstance.set(realm, realmRec);\n}\n\n// Initialize the global variables for the new Realm.\nfunction setDefaultBindings(safeGlobal, safeEval, safeFunction) {\n  defineProperties(safeGlobal, {\n    eval: {\n      value: safeEval,\n      writable: true,\n      configurable: true\n    },\n    Function: {\n      value: safeFunction,\n      writable: true,\n      configurable: true\n    }\n  });\n}\n\nfunction createRealmRec(unsafeRec, transforms, sloppyGlobals) {\n  const { sharedGlobalDescs, unsafeGlobal } = unsafeRec;\n\n  const safeGlobal = create(unsafeGlobal.Object.prototype, sharedGlobalDescs);\n\n  const safeEvaluatorFactory = createSafeEvaluatorFactory(\n    unsafeRec,\n    safeGlobal,\n    transforms,\n    sloppyGlobals\n  );\n  const safeEvalOperation = safeEvaluatorFactory();\n  const safeEval = createSafeEvaluator(unsafeRec, safeEvalOperation);\n  const safeFunction = createFunctionEvaluator(unsafeRec, safeEvalOperation);\n  const safeEvalWhichTakesEndowments = createSafeEvaluatorWhichTakesEndowments(\n    safeEvaluatorFactory\n  );\n\n  setDefaultBindings(safeGlobal, safeEval, safeFunction);\n\n  const realmRec = freeze({\n    safeGlobal,\n    safeEval,\n    safeEvalWhichTakesEndowments,\n    safeFunction\n  });\n\n  return realmRec;\n}\n\n/**\n * A root realm uses a fresh set of new intrinics. Here we first create\n * a new unsafe record, which inherits the shims. Then we proceed with\n * the creation of the realm record, and we apply the shims.\n */\nfunction initRootRealm(parentUnsafeRec, self, options) {\n  // note: 'self' is the instance of the Realm.\n\n  // todo: investigate attacks via Array.species\n  // todo: this accepts newShims='string', but it should reject that\n  const {\n    shims: newShims,\n    transforms,\n    sloppyGlobals,\n    configurableGlobals\n  } = options;\n  const allShims = arrayConcat(parentUnsafeRec.allShims, newShims);\n\n  // The unsafe record is created already repaired.\n  const unsafeRec = createNewUnsafeRec(allShims, configurableGlobals);\n  const { unsafeEval } = unsafeRec;\n\n  const Realm = unsafeEval(buildChildRealmString)(\n    unsafeRec,\n    // eslint-disable-next-line no-use-before-define\n    BaseRealm\n  );\n\n  // Add a Realm descriptor to sharedGlobalDescs, so it can be defined onto the\n  // safeGlobal like the rest of the globals.\n  unsafeRec.sharedGlobalDescs.Realm = {\n    value: Realm,\n    writable: true,\n    configurable: true\n  };\n\n  // Creating the realmRec provides the global object, eval() and Function()\n  // to the realm.\n  const realmRec = createRealmRec(unsafeRec, transforms, sloppyGlobals);\n\n  // Apply all shims in the new RootRealm. We don't do this for compartments.\n  const { safeEvalWhichTakesEndowments } = realmRec;\n  for (const shim of allShims) {\n    safeEvalWhichTakesEndowments(shim);\n  }\n\n  // The realmRec acts as a private field on the realm instance.\n  registerRealmRecForRealmInstance(self, realmRec);\n}\n\n/**\n * A compartment shares the intrinsics of its root realm. Here, only a\n * realmRec is necessary to hold the global object, eval() and Function().\n */\nfunction initCompartment(unsafeRec, self, options = {}) {\n  // note: 'self' is the instance of the Realm.\n\n  const { transforms, sloppyGlobals } = options;\n  const realmRec = createRealmRec(unsafeRec, transforms, sloppyGlobals);\n\n  // The realmRec acts as a private field on the realm instance.\n  registerRealmRecForRealmInstance(self, realmRec);\n}\n\nfunction getRealmGlobal(self) {\n  const { safeGlobal } = getRealmRecForRealmInstance(self);\n  return safeGlobal;\n}\n\nfunction realmEvaluate(self, x, endowments = {}, options = {}) {\n  // todo: don't pass in primal-realm objects like {}, for safety. OTOH its\n  // properties are copied onto the new global 'target'.\n  // todo: figure out a way to membrane away the contents to safety.\n  const { safeEvalWhichTakesEndowments } = getRealmRecForRealmInstance(self);\n  return safeEvalWhichTakesEndowments(x, endowments, options);\n}\n\nconst BaseRealm = {\n  initRootRealm,\n  initCompartment,\n  getRealmGlobal,\n  realmEvaluate\n};\n\n// Create the current unsafeRec from the current \"primal\" environment (the realm\n// where the Realm shim is loaded and executed).\nconst currentUnsafeRec = createCurrentUnsafeRec();\n\n/**\n * The \"primal\" realm class is defined in the current \"primal\" environment,\n * and is part of the shim. There is no need to facade this class via evaluation\n * because both share the same intrinsics.\n */\nconst Realm = buildChildRealm(currentUnsafeRec, BaseRealm);\n\nexport default Realm;\n"],"names":[],"mappings":"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"}